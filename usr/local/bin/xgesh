#!/bin/bash

#set >/tmp/1.log
#set -eux
#TODO: flock
#TODO: transparent ipset
#TODO: transparent iptables
#TODO: transparent tc
#TODO: transparent ip
#TODO: trap EXIT _exit 
# _exit()

# examples
#ip xge_forward add 192.168.1.1 
#ip xge_snat add 192.168.1.1 2.2.2.2
#ip xge_redirect add 192.168.1.1
#ip mark88 add 192.168.1.1
#filter create fw_999 src-list drop
#filter create fw_999 src-list drop
#nat create fw_999 src-list snat
#nat create fw_999 src-list redirect
#policy set 192.168.1.1 in 10000 20000 12000 out 10000 20000 12000
# ip_access_list <ipset_command> <access_list_name> <accept|allow|deny|snat|dnat> <source> <destination> <ipset_name>

export PATH="$PATH:/usr/sbin/:/sbin/:/usr/local/sbin/"
TAB_FILE="/var/lib/nas_iptab_nat.dat"

die() {
	err="$1"
	shift
	echo "$@"
	exit $err
}

nat_chain_eval() {
	for i in ${1//./ }; do
		x=$((num<<8))
		num=$((x|i))
	done
	(( a=num & 15 ))
	(( b=(num & 240) >> 4 ))
	echo "xge_user2snat_${a}_${b}"
}

iptab_file_refresh(){
	if [ ! -f "$TAB_FILE" ] || [ $(($(date +%s) - $(stat -c %Y "$TAB_FILE"))) -gt 5 ]; then
		iptables -t nat -nL --line | fgrep SNAT > $TAB_FILE
		grep "NAT" $TAB_FILE > $TAB_FILE.SNAT
	else
		echo SKIP snat file refresh
	fi 
}

snat_tree_del() {
	iptab_file_refresh
	NAT_CHAIN=$(nat_chain_eval $1)
	iptables -t nat -D $NAT_CHAIN -s $1 -j SNAT --to-source $2 &>/dev/null
	while read OLD_NUMBER_SNAT t t t t t to t; do
		[ -z "$OLD_NUMBER_SNAT" ] && break
		iptables -t nat -D $NAT_CHAIN -s $1 -j SNAT --to-source ${to//to:/} &>/dev/null
	done <<< "$(fgrep $1 $TAB_FILE.SNAT)"
}

snat_tree_add() {
	snat_tree_del $1 $2 &>/dev/null
	iptables -t nat -I $(nat_chain_eval $1) -s $1 -j SNAT --to-source $2
}
__ipset() {
	# echo -n \'PATH=$PATH\'' '
	if [ "$1" = 'add' ]; then
		ipset -q test $2 $3 && echo " $3 already in $2 " || ipset $@
		return 0
	fi

	ipset $@
}

ip() {
	local list="$1"
	local action="$2"
	local ip="$3"

	echo $FUNCNAME $@
	[ "${list:0:4}" != "xge_" ] && list=xge_$list

	if  [ "$#" -ge '4' -a "$list" = 'xge_snat' ]; then
		snatip=$4
		snat_tree_del "$3" "$4"
		if [ "$action" = 'add' ]; then
			snat_tree_add "$3" "$4"
			return $?
		fi
	fi

	__ipset $action $list $ip
}

main() {
	cmd=$1
	shift
	case $cmd in
	ip | filter | nat | mangle )
		$cmd $@
		;;
	* )
		die 1 "Bad command $cmd $@"
		return 1
		;;
	esac
}

main $@
