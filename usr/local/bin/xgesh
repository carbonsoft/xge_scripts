#!/bin/bash

export PATH="$PATH:/usr/sbin/:/sbin/:/usr/local/sbin/"

#set >/tmp/1.log
#set -eux
#TODO: flock
#TODO: transparent ipset
#TODO: transparent iptables
#TODO: transparent tc
#TODO: transparent ip
#TODO: trap EXIT _exit 
# _exit()


die(){
	err="$1"
	shift
	echo "$@"
	exit $err
}

#ip xge_forward add 192.168.1.1 
#ip xge_snat add 192.168.1.1 2.2.2.2
#ip xge_redirect add 192.168.1.1
#ip mark88 add 192.168.1.1

#policy set 192.168.1.1 in 10000 20000 12000 out 10000 20000 12000



# filter create fw_999 src-list drop


# filter create fw_999 src-list drop
# nat create fw_999 src-list snat
# nat create fw_999 src-list redirect

# ip_access_list <ipset_command> <access_list_name> <accept|allow|deny|snat|dnat> <source> <destination> <ipset_name>

snat_tree_add() {
	iptables -t nat -I xge_postrouting -s $1 -j SNAT --to-source $2
}

snat_tree_del() {
	while iptables -t nat -D xge_postrouting -s $1 -j SNAT --to-source $2; do
		: 
	done
}

__ipset() {
	# echo -n \'PATH=$PATH\'' '
	if [ "$1" = 'add' ]; then
		ipset -q test $2 $3 && echo " $3 already in $2 " || ipset $@
		return 0
	fi

	ipset $@
}

ip() {
	local list="$1"
	local action="$2"
	local ip="$3"

	echo $FUNCNAME $@
	[ "${list:0:4}" != "xge_" ] && list=xge_$list

	if  [ "$#" -ge '4' -a "$list" = 'xge_snat' ]; then
		snatip=$4
		snat_tree_del "$3" "$4"
		[ "$action" = 'add' ] && snat_tree_add "$3" "$4"
		return 0
	fi

	__ipset $action $list $ip
}

main() {
	cmd=$1
	shift
	case $cmd in
	ip | filter | nat | mangle )
		$cmd $@
		;;
	* )
		die 1 "Bad command $cmd $@"
		return 1
		;;
	esac
}

main $@
